---
# This file processes a single entry in the syncoid__initiator_jobs list
- name: Determine if remote source or remote sink
  set_fact:
    remote_source: "{{ 'host' in job['source'] }}"
    remote_sink: "{{ 'host' in job['sink'] }}"
    local_user: "{{ job['local_user_account'] | default('root') }}"

- name: Define connection strings for both local
  set_fact:
    source_connection: ""
    sink_connection: ""
    remote_connection: False
    remote_connection_dict: False
  when: not remote_source and not remote_sink | bool

- name: Define connection strings for remote source
  set_fact:
    source_connection: "{{ job['source']['user'] }}@{{ job['source']['host'] }}"
    sink_connection: ""
  when: remote_source | bool

- name: Define connection strings for remote sink
  set_fact:
    sink_connection: "{{ job['sink']['user'] }}@{{ job['sink']['host'] }}"
    source_connection: ""
  when: remote_sink | bool

- name: Define connection strings for remote source
  set_fact:
    remote_connection: "{{ source_connection }}"
    remote_connection_dict: "{{ job['source'] }}"
  when: remote_source | bool

- name: Define connection strings for remote sink
  set_fact:
    remote_connection: "{{ sink_connection }}"
    remote_connection_dict: "{{ job['sink'] }}"
  when: remote_sink | bool

- name: Error out if both are remote
  fail:
    msg: "Both source and sink have hosts defined"
  when: remote_source and remote_sink | bool

- name: Error out if both are local and both have usernames
  fail:
    msg: "Both source and sink are local and both have usernames"
  when: (not remote_source and not remote_sink) and ('user' in job['sink'] and 'user' in job['source']) | bool

- name: Build dataset strings for remote source and local sink
  set_fact:
    source_dataset_string: "{{ source_connection }}:{{ job['source']['dataset'] }}"
    sink_dataset_string: "{{ sink_connection }}{{ job['sink']['dataset'] }}"
  when: source_connection

- name: Build dataset strings for remote sink and local source
  set_fact:
    source_dataset_string: "{{ source_connection }}{{ job['source']['dataset'] }}"
    sink_dataset_string: "{{ sink_connection }}:{{ job['sink']['dataset'] }}"
  when: sink_connection

- name: Build dataset strings for local source and local sink
  set_fact:
    source_dataset_string: "{{ job['source']['dataset'] }}"
    sink_dataset_string: "{{ job['sink']['dataset'] }}"
  when: (not sink_connection and not source_connection) | bool

- name: Ensure local user exists
  user:
    name: "{{ local_user }}"
    state: present
  register: local_user_info

- name: Copy ssh key priv key to initator
  copy:
    src: "{{ job['ssh_private_key_file'] }}"
    dest: "{{ local_user_info['home'] }}/.ssh/"
    owner: "{{ local_user }}"
    mode: '0600'
  register: ssh_priv_key_info
  when: remote_sink or remote_source | bool

- name: Ensure ssh host key known
  lineinfile:
    dest: "{{ local_user_info['home'] }}/.ssh/known_hosts"
    create: yes
    state: present
    line: "{{ lookup('pipe', 'ssh-keyscan -trsa ' + remote_connection_dict.host ) }}"
  become_user: "{{ local_user }}"
  when: remote_connection | bool

- name: Verify that we can ssh into the remote sink machine with given username and ssh key
  command: "ssh -q -i {{ ssh_priv_key_info.dest }} -o ConnectTimeout=5 {{ remote_connection }} 'exit 0'"
  register: ssh_check_output
  become_user: "{{ local_user }}"
  when: remote_connection | bool

- name: Build syncoid arguments
  set_fact:
    syncoid_arguments: "{{ job['syncoid_arguments'] | default([]) }}"
    job_name: "syncoid-{{ source_dataset_string }}-{{ sink_dataset_string }}"

- name: Add sshkey argument if specified
  set_fact:
    syncoid_arguments: "{{ syncoid_arguments + ['--sshkey', ssh_priv_key_info.dest] }}"
  when: ssh_priv_key_info.dest is defined

- name: Generate cron task for syncoid
  cron:
    name: "{{ job_name | regex_replace('\/', '_') }}"
    job: "/usr/sbin/syncoid {{ source_dataset_string }} {{ sink_dataset_string }} {{ syncoid_arguments | join(' ') }}"
    minute: "*/15"
    cron_file: "syncoid"
    user: "{{ local_user }}"
